/*
 * Продолжение задачи №2 Создание очереди
 *
 * Даны указатели P1 и P2 на начало и конец непустой очереди. Извлекать из очереди
 * элементы, пока значение начального элемента очереди не станет четным, и выводить значения
 * извлеченных элементов(если очередь не содержит элементов с четными значениями, то извлечь
 * все ее элементы).Вывести также новые адреса начала и конца очереди(для пустой очереди
 * дважды вывести nullptr).После извлечения элементов из очереди освобождать память, которую
 * они занимали
 *
 * Для каждой динамической структуры должен быть предусмотрен стандартный набор методов - добавления/удаления/вывода элементов.
 * Во всех задачах обязательно наличие дружественного интерфейса. Ввод данных с клавиатуры.
 *
 * В заданиях данной подгруппы структура «очередь» (queue) моделируется цепочкой связанных
 * узлов-записей типа TNode. Поле Next последнего элемента цепочки равно nullptr. Началом
 * очереди («головой», head) считается первый элемент цепочки, концом («хвостом», tail) — ее
 * последний элемент. Для возможности быстрого добавления в конец очереди нового элемента
 * удобно хранить, помимо указателя на начало очереди, также и указатель на ее конец. В случае
 * пустой очереди указатели на ее начало и конец полагаются равными nullptr. Как и для стека,
 * значением элемента очереди считается значение его поля Data.
 */

#ifndef QUEUE_H
#define QUEUE_H

typedef struct Queue* QueuePtr;

/**
 * @brief Создает новую пустую очередь
 * @return Указатель на очередь или nullptr при ошибке
 */
QueuePtr createQueue();

/**
 * @brief Уничтожает очередь и освобождает память
 * @param q Указатель на очередь
 */
void destroyQueue(QueuePtr q);

/**
 * @brief Добавляет элемент в очередь
 * @param q Указатель на очередь
 * @param value Значение для добавления
 * @return true при успехе, false при ошибке
 */
bool push(QueuePtr q, int value);

/**
 * @brief Извлекает элемент из очереди
 * @param q Указатель на очередь
 * @param outValue Ссылка для сохранения извлеченного значения
 * @return true при успехе, false если очередь пуста
 */
bool pop(QueuePtr q, int& outValue);

/**
 * @brief Проверяет, пуста ли очередь
 * @param q Указатель на очередь
 * @return true если очередь пуста или невалидна
 */
bool isEmpty(QueuePtr q);

/**
 * @brief Выводит содержимое очереди
 * @param q Указатель на очередь
 */
void displayQueue(QueuePtr q);

/**
 * @brief Извлекает элементы до первого четного
 * @param q Указатель на очередь
 */
void processUntilEven(QueuePtr q);

/**
 * @brief Выводит адреса начала и конца очереди
 * @param q Указатель на очередь
 */
void getQueueAddresses(QueuePtr q);

#endif // QUEUE_H
