/*
 * Продолжение задания №4 двусвязный список
 * Дан двусвязный линейный список и указатель первый элемент этого
 * списка. Все элементы списка хранят различные между собой значения. Необходимо
 * вывести значения элементов списка, которые находятся между наименьшим и
 * наибольшим элементами списка, в том порядке, в каком они находятся в исходном
 * списке. Использовать процедуры.
 *
 * Все динамические структуры данных реализовывать через классы. Не использовать STL.  Для каждой динамической структуры должен быть предусмотрен
 * стандартный набор методов - добавления/удаления/вывода элементов.
 * Во всех задачах обязательно наличие дружественного интерфейса. Ввод данных с клавиатуры.
 */

#ifndef DOUBLE_LIST_H
#define DOUBLE_LIST_H

/**
 * @brief Указатель на двусвязный список
 */
typedef struct DoublyLinkedList* DoublyLinkedListPtr;

/**
 * @brief Создает новый пустой двусвязный список
 * @return Указатель на созданный список или NULL при ошибке выделения памяти
 */
DoublyLinkedListPtr CreateList();

/**
 * @brief Уничтожает список и освобождает все связанные ресурсы
 */
void DestroyList(DoublyLinkedListPtr list);

/**
 * @brief Добавляет новый элемент в конец списка
 * @param list Указатель на список
 * @param value Значение для добавления
 * @return true - элемент успешно добавлен, false
 */
bool Append(DoublyLinkedListPtr list, int value);

/**
 * @brief Выводит содержимое списка в стандартный поток вывода
 * @param list Указатель на список строки
 */
void DisplayList(const DoublyLinkedListPtr list);

/**
 * @brief Находит и выводит элементы между минимальным и максимальным значениями
 * @param list Указатель на список
 */
void PrintBetweenMinMax(const DoublyLinkedListPtr list);

/**
 * @brief Проверяет, пуст ли список
 * @param list Указатель на список
 * @return true если список пуст или невалиден, false если содержит элементы
 */
bool IsEmpty(const DoublyLinkedListPtr list);

#endif // DOUBLE_LIST_H
